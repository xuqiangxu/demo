/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        //迭代法
        //根节点创建
        //必有尺寸
        TreeNode* root = new TreeNode(preorder[0]);
        stack<TreeNode*> st;
        st.push(root);
        int index = 0;
        for(int i=1; i<preorder.size(); ++i)
        {
            //左孩子
            TreeNode* node = st.top();
            if(node->val!=inorder[index])
            {
                node->left = new TreeNode(preorder[i]);
                st.push(node->left);
                continue;
            }
      
            while(!st.empty()&&st.top()->val==inorder[index]){   
                ++index;
                node = st.top();
                st.pop();
            }
            node->right = new TreeNode(preorder[i]);
            st.push(node->right);
            
        }
        return root;

    }
};
