/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        //迭代法
        //左中右
        //左右中
        
        //先创建根节点
        int index = postorder.size()-1;
        TreeNode* root = new TreeNode(postorder[index]);
        stack<TreeNode*> st;
        st.push(root);
        for(int i = postorder.size()-2; i>-1; i--)
        {
            TreeNode* node = st.top();
            if(node->val != inorder[index])
            {
                //右孩子
                node->right = new TreeNode(postorder[i]);
                st.push(node->right);
                continue;
            }
            while(!st.empty()&&st.top()->val==inorder[index])
            {
                node = st.top();
                st.pop();
                --index;
            }
            node->left = new TreeNode(postorder[i]);
            st.push(node->left);
        }
        return root;



    }
};