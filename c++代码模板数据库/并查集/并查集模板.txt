//并查集三个操作
//初始化
//查找
//合并

//无优化版本
//最简单的并查集
class Djset {
public:
    vector<int> parent;  // 记录节点的根

    //初始化 刚开始 每个元素自成一个集合  故每个元素的父节点为本身
    Djset(int n): parent(vector<int>(n)) {
        for (int i = 0; i < n; i++) parent[i] = i;
    }

     //寻找x的父节点
    int find(int x) {
        if (x != parent[x]) return find(parent[x]);
        return parent[x];
    }

    //合并 x，y，并调整父节点 
    void merge(int x, int y) {
        int rootx = find(x);
        int rooty = find(y);
        parent[rooty] = rootx;
    }
};


//未优化的并查集会有深度过大导致复杂度过大问题
//按秩合并 路径压缩进行优化

// 注意：使用该代码，并不能使得所有的元素都直接指向根节点，仍然存在间接的指向
class Djset {
public:
    vector<int> parent;  // 记录节点的根
    vector<int> rank;  // 记录根节点的深度（用于优化）
    Djset(int n): parent(vector<int>(n)), rank(vector<int>(n)) {
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
    }
    
    int find(int x) {
        // 压缩方式：直接指向根节点
        if (x != parent[x]) {
            parent[x] = find(parent[x]);
        }
        return parent[x];
    }
    
    void merge(int x, int y) {
        int rootx = find(x);
        int rooty = find(y);
        if (rootx != rooty) {
            // 按秩合并
            if (rank[rootx] < rank[rooty]) {
                swap(rootx, rooty);
            }
            parent[rooty] = rootx;
            if (rank[rootx] == rank[rooty]) rank[rootx] += 1;
        }
    }
};















